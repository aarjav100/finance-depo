// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  fullName  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile    Profile?
  expenses   Expense[]
  budgets    Budget[]
  categories ExpenseCategory[]

  @@map("users")
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  fullName  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model ExpenseCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  icon      String?
  color     String?
  isDefault Boolean  @default(false)
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]
  budgets  Budget[]

  @@map("expense_categories")
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String
  expenseDate DateTime
  userId      String   @db.ObjectId
  categoryId  String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category ExpenseCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("expenses")
}

model Budget {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Float
  period     String // 'weekly', 'monthly', 'yearly'
  startDate  DateTime
  isActive   Boolean  @default(true)
  userId     String   @db.ObjectId
  categoryId String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category ExpenseCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("budgets")
}
